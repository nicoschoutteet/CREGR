index <- index + 1
verturl <- paste(base_verturl,verturlid,sep="")
verthtml <- read_html(verturl)
##Initiatieven
vertiniturl <- verthtml %>% html_node(".field--name-recent-documents-link .field__items .field__item a") %>% html_attr("href")
vertiniturl <- sub("publicatiedatum[van][date]=all","publicatiedatum[van][date]=current_legislature", vertiniturl, fixed = TRUE)
initiatieven <- read_html(paste(base_verturl, vertiniturl, sep="")) %>% html_node("h1.page-title") %>% html_text()
##Vragen
vertvragenurl <- verthtml %>% html_node(".field--name-recent-questions-link .field__items .field__item a") %>% html_attr("href")
vertvragenurl <- sub("publicatiedatum[van][date]=all","publicatiedatum[van][date]=current_legislature", vertvragenurl, fixed = TRUE)
vragen <- read_html(paste(base_verturl, vertvragenurl, sep="")) %>% html_node("h1.page-title") %>% html_text()
##Tussenkomsten
verttussenkurl <- verthtml %>% html_node(".field--name-recent-interventions-link .field__items .field__item a") %>% html_attr("href")
verttussenkurl <- sub("publicatiedatum[van][date]=all","publicatiedatum[van][date]=current_legislature", verttussenkurl, fixed = TRUE)
tussenkomsten <- read_html(paste(base_verturl, verttussenkurl, sep="")) %>% html_node("h1.page-title") %>% html_text()
vertdata <- data.frame()
vertdata <- data.frame(vlavert[index], vlapart[index], initiatieven, vragen, tussenkomsten, vlaverturls[index])
rawdata <- rbind(rawdata, vertdata)
}
colnames(rawdata) <- c("naam", "partij", "initiatieven", "vragen", "tussenkomsten", "url")
finaldata <- rawdata
##Remove text we don't need
finaldata$initiatieven <- sub("Ongeveer ", "", finaldata$initiatieven, fixed=TRUE)
finaldata$initiatieven <- sub(" zoekresultaten in de huidige zittingsperiode", "", finaldata$initiatieven, fixed=TRUE)
finaldata$vragen <- sub("Ongeveer ", "", finaldata$vragen, fixed=TRUE)
finaldata$vragen <- sub(" zoekresultaten in de huidige zittingsperiode", "", finaldata$vragen, fixed=TRUE)
finaldata$tussenkomsten <- sub("Ongeveer ", "", finaldata$tussenkomsten, fixed=TRUE)
finaldata$tussenkomsten <- sub(" zoekresultaten in de huidige zittingsperiode", "", finaldata$tussenkomsten, fixed=TRUE)
##Convert to numbers
finaldata$initiatieven <- as.integer(finaldata$initiatieven)
finaldata$vragen <- as.integer(finaldata$vragen)
finaldata$tussenkomsten <- as.integer(finaldata$tussenkomsten)
##Format names and ad questions and initiatives
finaldata <- finaldata %>% separate(naam, c("voornaam", "achternaam"), " ", extra = "merge")
finaldata$initiaal <- paste(substr(finaldata$voornaam, 1, 1), ".", sep="")
finaldata$initnaam <- paste(finaldata$initiaal, finaldata$achternaam, sep=" ")
finaldata$vrageninitiatieven <- finaldata$vragen + finaldata$initiatieven
median.tussenkomsten <- median(finaldata$tussenkomsten)
median.vrageninitiatieven <- median(finaldata$vrageninitiatieven)
finaldata <- select(finaldata, voornaam, achternaam, initiaal, initnaam, partij, initiatieven, vragen, tussenkomsten, vrageninitiatieven, profiel, url)
write.csv(finaldata, file="finaldata_30-09.csv", row.names = FALSE)
scatter <- ggplot(finaldata, aes(x = tussenkomsten, y = vrageninitiatieven, col = partij)) + geom_point( alpha = 0.7, size = 3) + theme_minimal() + geom_text(aes(label = initnaam), nudge_y = 10) + scale_colour_manual(values = c("#83de62","#ffac12", "#003d6d", "#f5822a", "#e23a3f", "#5a5101", "#000000", "#cccccc")) + labs(x = "Aantal tussenkomsten", y = "Aantal vragen en initiatieven") + theme(legend.position="none") + geom_hline(aes(yintercept=median.vrageninitiatieven)) + geom_vline(aes(xintercept=median.tussenkomsten))
scattergrid <- ggplot(finaldata, aes(x = tussenkomsten, y = vrageninitiatieven, col = partij)) + geom_point( alpha = 0.2, size = 3) + theme_minimal() + scale_colour_manual(values = c("#83de62","#ffac12", "#003d6d", "#f5822a", "#e23a3f", "#ffe500", "#000000", "#cccccc")) + labs(x = "Aantal tussenkomsten", y = "Aantal vragen en initiatieven") + theme(legend.position="none") + geom_hline(aes(yintercept=median.vrageninitiatieven)) + geom_vline(aes(xintercept=median.tussenkomsten)) + facet_grid(. ~ partij) + theme(panel.background = element_rect(fill = '#fef7ea', colour = '#fef7ea'), plot.background = element_rect(fill = '#fef7ea', colour = '#fef7ea'))
get("https://api.open-notify.org/astros.json")
rest = GET("https://api.open-notify.org/astros.json")
res -< GET("https://api.open-notify.org/astros.json")
res -> GET("https://api.open-notify.org/astros.json")
res <- GET("https://api.open-notify.org/astros.json")
res <- get("https://api.open-notify.org/astros.json")
library(httr)
library(tidyverse)
res = get("https://api.open-notify.org/astros.json")
res = GET(“http://api.open-notify.org/iss-pass.json",
query = list(lat = 40.7, lon = -74))
res = GET(“http://api.open-notify.org/iss-pass.json", query = list(lat = 40.7, lon = -74))
res = get(“http://api.open-notify.org/iss-pass.json",
query = list(lat = 40.7, lon = -74))
library(devtools)
packageVersion("devtools")
install.packages("devtools")
install.packages("devtools")
packageVersion("devtools")
library(tidyverse)
library(fs)
create_package()
create_package("C:\Users\schoutteet\OneDrive - CREG\Documents\R"")
create_package("C:/Users/schoutteet/OneDrive - CREG/Documents/R/foofactors")
library(fs)
install.packages("fs")
install.packages("fs")
library(fs)
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
library(tidyverse)
install.packages("tidyverse")
git config --global user.name "Nico Schoutteet"
git config --global user.name "nicoschoutteet"
git config --global user.email "nico.schoutteet@creg.be"
git config --global user.name "nicoschoutteet"
git config --global user.name "nicoschoutteet"
# libraries ---------------------------------------------------------------
library(tidyverse)
library(devtools)
library(CREGRPackage)
install_github("nicoschoutteet/CREGRPackage")
library(CREGRPackage)
CREGRPackage::
detach(CREGRPackage)
CREGRPackage::
detach("CREGRPackage"")
detach("package:CREGRPackage", unload = TRUE)
install_github("nicoschoutteet/CREGRPackage")
detach("package:CREGRPackage", unload = TRUE)
install_github("nicoschoutteet/CREGRPackage")
library(CREGRPackage)
library(CREGRPackage)
install_github("nicoschoutteet/CREGRPackage")
# libraries ---------------------------------------------------------------
library(tidyverse)
library(devtools)
install_github("nicoschoutteet/CREGRPackage")
devtools::install_github("nicoschoutteet/CREGRPackage")
remove.packages("CREGRPackage")
remove.packages("CREGR")
devtools::install_github("nicoschoutteet/CREGRPackage")
library(CREGRPackage)
devtools::install_github("nicoschoutteet/CREGRPackage")
installr::updater()
library(tidyverse)
library(devtools)
install_github("nicoschoutteet/CREGRPackage")
install_github("nicoschoutteet/CREGRPackage")
library(devtools)
install_github("nicoschoutteet/CREGRPackage")
install.packages("devtools")
install.packages("roxygen2")
library(tidyverse)
library(devtools)
library(roxygen2)
setwd("C:/Users/schoutteet/OneDrive - CREG/Documents/GitHub")
create("CREGR")
getwd()
setwd("./CREGR")
document()
setwd("./CREGR")
getwd()
document(à)
document()
document()
#' @examples ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + theme_CREG()
document()
document()
document()
document()
document()
save_CREG  <- function(filename) {
ggsave(paste0(filename, ".png"), height = 10, width = 16, units = "cm")
}
document()
roxygen2::document()
library(devtools)
document()
devtools::document()
devtools::document()
devtools::document()
palette_CREG <- list(
`countries` = colour_CREG("blue2", "red", "orange", "green", "yellow"),
`main` = colour_CREG("blue2", "red", "orange", "green", "yellow", "pink", "purple"),
`blue` = colour_CREG("blue2", "blue3", "grey1", "grey2")
)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
getwd()
?tail()
left_join(select(loadCSV_CREG(subfolder, filename, col_types)),
DateTime, ncol:ncol-nchar(col_types),
by = c("DateTime" = "DateTime"),
keep = FALSE)
?left_join()
document()
library(devtools)
document()
document()
document()
document()
document()
document()
document()
document()
list <- c("BENL_DAM", "FRDEAT_DAM", "nnnn", "nnnnnn")
list <- list("BENL_DAM", "FRDEAT_DAM", "nnnn", "nnnnnn")
View(list)
list <- list(c("BENL_DAM", "FRDEAT_DAM"), c("nnnn", "nnnnnn"))
View(list)
list[[1]]
list[[1, 2]]
list[[1, 1]]
list[[1]]
list[[1[[1]]]]
list[[1[[2]]]]
list[[1:2]]
list[[1:1]]
list[[2:1]]
list[[2:2]]
list[2:2]
View(list)
files <- list(filenames, col_types)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
files <- list(filenames, col_types)
}
loadmultiplecsv_CREG("source data", "test", "test2")
test <- loadmultiplecsv_CREG("source data", "test", "test2")
View(test)
test <- loadmultiplecsv_CREG("source data", c("test", "test2", c("test3", "test4")))
test <- loadmultiplecsv_CREG("source data", c("test", "test2"), c("test3", "test4"))
View(test)
test[1]
test[1$1]
test[1][1]
test[1][2]
test[2]
list <- list(c("BENL_DAM", "FRDEAT_DAM"), c("nnnn", "nnnnnn"))
test <- loadmultiplecsv_CREG("source data", c("test", "test2"), c("test3", "test4"))
files <- data.rame(filenames, col_types)
files <- data.frame(filenames, col_types)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
files <- data.frame(filenames, col_types)
}
test <- loadmultiplecsv_CREG("source data", c("test", "test2"), c("test3", "test4"))
View(test)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- data.frame(filenames, col_types)
}
test <- loadmultiplecsv_CREG("source data", c("test", "test2"), c("test3", "test4"))
View(test)
temp <- list(filenames, col_types)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
}
test <- loadmultiplecsv_CREG("source data", c(1, 2), c(3, 4))
?lapply
temp <- list(filenames, col_types)
temp <- list(filenames, col_types)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
#lapply(x = temp[1], FUN = )
}
test <- loadmultiplecsv_CREG("source data", c(1, 2), c(3, 4))
test <- loadmultiplecsv_CREG("source data", c(1, 2), c(3, 4))
temp <- list(filenames, col_types)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
}
test <- loadmultiplecsv_CREG("source data", c(1, 2), c(3, 4))
test <- loadmultiplecsv_CREG("source data", c(1, 2), c(3, 4))
print(temp)
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
print(temp)
}
test <- loadmultiplecsv_CREG("source data", c(1, 2), c(3, 4))
test <- loadmultiplecsv_CREG("source data", c("file2", "file2"), c(3, 4))
test
lapply(test[[1]], substr(start = 1, stop = 2))
lapply(test[[1]], substr(., start = 1, stop = 2))
lapply(test[[1]], substr(test[[1]], start = 1, stop = 2))
substr(test[[1]], start = 1, stop = 2)
print(temp[[1]])
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
print(temp[[1]])
}
test <- loadmultiplecsv_CREG("source data", c("file1", "file2"), c(3, 4))
print(paste0(subfolder, "/", temp1, temp2))
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
print(paste0(subfolder, "/", temp1, temp2))
print(temp[[1]])
}
test <- loadmultiplecsv_CREG("source data", c("file1", "file2"), c(3, 4))
print(paste0(subfolder, "/", temp[[1]], temp[[2]]))
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
print(paste0(subfolder, "/", temp[[1]], temp[[2]]))
}
test <- loadmultiplecsv_CREG("source data", c("file1", "file2"), c(3, 4))
test <- loadmultiplecsv_CREG("source data", c("BENL_DAM", "FRDEAT_DAM"), c(3, 4))
print(paste0(subfolder, "/", temp[[1]], ".csv", temp[[2]]))
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types) {
temp <- list(filenames, col_types)
print(paste0(subfolder, "/", temp[[1]], ".csv", temp[[2]]))
}
test <- loadmultiplecsv_CREG("source data", c("BENL_DAM", "FRDEAT_DAM"), c(3, 4))
devtools::document()
devtools::document()
devtools::document()
document()
devtools::document()
document()
devtools::document()
document()
devtools::document()
source('~/GitHub/CREGR/R/load csv.R')
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("nicoschoutteet/CREGR")
devtools::document()
devtools::document()
library(tidyverse)
library(CREGR)
ggplot(data = mpg) +
geo_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia")
save_CREG("before")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia") +
theme_CREG()
save_CREG("after")
save_CREG("pictures/after")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia",
x = "Some numbers",
y = "Some values") +
theme_CREG()
save_CREG("pictures/after")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia",
x = "Some numbers",
y = "Some values")
save_CREG("pictures/before")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia",
x = "Some numbers",
y = "Some values")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia",
x = "Some numbers",
y = "Some values") +
theme_CREG()
library(knitr)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = colour_CREG("blue1")) +
labs(title = "Random figure in CREG report",
subtitle = "Some extra information to describe the figure below",
caption = "Source: calculations CREG based on data Elia",
x = "Some numbers",
y = "Some values") +
theme_CREG()
save_CREG("pictures/after")
devtools::document()
devtools::document()
function(subfolder, filename, col_types, resolution = "h") {
if (resolutio
loadcsv_CREG <- function(subfolder, filename, col_types, resolution = "h") {
if (resolution == "h") {
read_delim(paste0(subfolder, "/", filename, ".csv"),
delim = ";",
locale = locale(decimal_mark = ","),
col_types = paste0("nnnccDcncncnncc", col_types)) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels")) %>%
select(DateTime, everything())
} else if (resolution == "q") {
read_delim(paste0(subfolder, "/", filename, ".csv"),
delim = ";",
locale = locale(decimal_mark = ","),
col_types = paste0("nnnccDcncncnnncc", col_types)) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels")) %>%
select(DateTime, everything())
}
}
loadcsv_CREG <- function(subfolder, filename, col_types, resolution = "h") {
if (resolution == "h") {
read_delim(paste0(subfolder, "/", filename, ".csv"),
delim = ";",
locale = locale(decimal_mark = ","),
col_types = paste0("nnnccDcncncnncc", col_types)) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels")) %>%
select(DateTime, everything())
} else if (resolution == "q") {
read_delim(paste0(subfolder, "/", filename, ".csv"),
delim = ";",
locale = locale(decimal_mark = ","),
col_types = paste0("nnnccDcncncnnncc", col_types)) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels")) %>%
select(DateTime, everything())
}
}
loadcsv_CREG("documents", "BENL_DAM", "nnnn")
library(tidyverse)
loadcsv_CREG("documents", "BENL_DAM", "nnnn")
df <- loadcsv_CREG("documents", "BENL_DAM", "nnnn")
df_test <- df %>%
mutate(hourtest = lubridate::hour(DateTime))
View(df_test)
df2 <- loadcsv_CREG("documents", "BENL_DAM", "nnnn")
?plyr::join_all()
df3 <- plyr::join_all(c("df", "df2"), by = "DateTime")
df3 <- plyr::join_all(c(df, df2), by = "DateTime")
df3 <- plyr::join_all(list(df, df2), by = "DateTime")
df3 <- plyr::join_all(list(df, df2), by = "DateTime", type = "left")
df3 <- plyr::join_all(list(df, df2), by = "DateTime")
loadmultiplecsv_CREG <- function(subfolder, filenames, col_types, resolution) {
tempfilepaths <- paste0(subfolder, "/", filenames, ".csv")
tempcoltypesh <- paste0("nnnccDcncncnncc", col_types)
tempcoltypesq <- paste0("nnnccDcncncnnncc", col_types)
resolution <- resolution
dataframelist <- list()
for (i in 1) {
if (resolution[[i]] == "h") {
dataframelist[[i]] <- read_delim(tempfilepaths[[i]],
delim = ";",
col_types = tempcoltypesh[[i]],
locale = locale(decimal_mark = ",")) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels"))
} else if (resolution[[i]] == "q") {
dataframelist[[i]] <- read_delim(tempfilepaths[[i]],
delim = ";",
col_types = tempcoltypesq[[i]],
locale = locale(decimal_mark = ",")) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels"))
}
}
for (i in seq(2, length(tempfilepaths))) {
if (resolution[[i]] == "h") {
dataframelist[[i]] <- read_delim(tempfilepaths[[i]],
delim = ";",
col_types = tempcoltypesh[[i]],
locale = locale(decimal_mark = ",")) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels")) %>%
select(DateTime, last_col(1:nchar(col_types[[i]])))
} else if (resolution[[i]] == "q") {
dataframelist[[i]] <- read_delim(tempfilepaths[[i]],
delim = ";",
col_types = tempcoltypesq[[i]],
locale = locale(decimal_mark = ",")) %>%
mutate(DateTime = as.POSIXct(paste(YearMonthDayCSV, substr(Quarter, 1, 5)), format = "%Y-%m-%d %H:%M", tz = "Europe/Brussels")) %>%
select(DateTime, last_col(1:nchar(col_types[[i]])))
}
}
plyr::join_all(dataframelist, by = "DateTime", type = "left") %>%
select(DateTime, everything())
}
df4 <- loadmultiplecsv_CREG("source data", c("BENL_DAM", "BENL_DAM"), c("nnnn", "nnnn"), c("h", "h"))
df4 <- loadmultiplecsv_CREG("documents", c("BENL_DAM", "BENL_DAM"), c("nnnn", "nnnn"), c("h", "h"))
df2 <- loadcsv_CREG("documents", "FRDEAT_DAM", "nnnnnn")
df4 <- loadmultiplecsv_CREG("documents", c("BENL_DAM", "FRDEAT_DAM"), c("nnnn", "nnnnnn"), c("h", "h"))
df2 <- loadcsv_CREG("documents", "FRDEAT_DAM", "nnnnnn")
df3 <- plyr::join_all(list(df, df2), by = "DateTime")
library(CREGR)
getwd()
devtools::document()
devtools::document()
CREGcolours <- list(
default = c("blue1" = "#00B0B9",
"blue2" = "#005F83",
"blue3" = "#002D72",
"blue4" = "#00A9E0",
"purple" = "#485CC7",
"green" = "#78D64B",
"yellow" = "#EFDF00",
"orange" = "#FF8200",
"pink" = "#FB637E",
"red" = "#C5003E",
"grey1" = "#C8C9C7",
"grey2" = "#75787B",
"black" = "#111111"),
countries = c("Belgium" = "#005F83",
"France" = "#EFDF00",
"Netherlands" = "#C5003E",
"Germany" = "#FF8200",
"Austria" = "#78D64B",
"Luxembourg" = "#FB637E",
"Great-Britain" = "#485CC7"),
bluegrey = c("blue1" = "#00B0B9",
"blue2" = "#005F83",
"grey1" = "#C8C9C7",
"grey2" = "#75787B")
)
#' CREG palette with ramped colours
#'
#' @param palette
#' @param alpha
#' @param reverse
#'
#' @return
#' @export
CREG_palette <- function(palette = "default", alpha = 1, reverse = FALSE) {
pal <- CREGcolours[[palette]]
if(reverse) {
pal <- rev(pal)
}
return(colorRampPalette(pal, alpha))
}
show_col(CREG_palette("default"))
library(tidyverse)
show_col(CREG_palette("default"))
show_col(CREG_palette("default"))
show_col(CREG_palette("default"))
library(scales)
show_col(CREG_palette("default"))
show_col(CREG_palette("countries"))
